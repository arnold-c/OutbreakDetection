"""
    calculate_beta(R‚ÇÄ, Œ≥, Œº, ùêÇ, pop_matrix)

Calculate the value Œ≤ for a given set of parameters and contact matrix.

```jldoctest
julia> calculate_beta(2.0, 1/8, 0.0, ones(1, 1), [1000])
0.00025
```

---

**TODO** Currently only works when the populations are the same size as each other, and doesn't account for an exposed state.

---

"""
function calculate_beta(
        R‚ÇÄ::T,
        Œ≥::T,
        Œº::T,
        ùêÇ::Array{T},
        pop_matrix::Array{T}
    ) where {T<:AbstractFloat}
    size(ùêÇ, 1) == size(ùêÇ, 2) ? nothing : error("ùêÇ must be square")
    size(ùêÇ, 1) == size(pop_matrix, 1) ? nothing : error("ùêÇ and pop_matrix must have the same number of rows")

    ùêÖ = ùêÇ .* pop_matrix
    ùêï = Diagonal(repeat([Œ≥ + Œº], size(ùêÇ, 1)))

    ùêÖùêï‚Åª¬π = ùêÖ * inv(ùêï)
    eigenvals, eigenvectors = eigen(ùêÖùêï‚Åª¬π)
    Œ≤ = R‚ÇÄ / maximum(real(eigenvals))
    
    return Œ≤
end

function calculate_beta(R‚ÇÄ, Œ≥, Œº, ùêÇ, pop_matrix)
    calculate_beta(
        convert(Float64, R‚ÇÄ),
        convert(Float64, Œ≥),
        convert(Float64, Œº),
        convert(Array{Float64}, [ùêÇ]),
        convert(Array{Float64}, [pop_matrix])
    )
end


"""
    calculateR0(Œ≤, Œ≥, Œº, ùêÇ, pop_matrix)

Calculate the basic reproduction number R‚ÇÄ for a given set of parameters and contact matrix.

```jldoctest
julia> calculateR0(0.00025, 1/8, 0.0, ones(1, 1), [1000])
2.0
```

---

**TODO** Currently only works when the populations are the same size as each other, and doesn't account for an exposed state.

---

"""
function calculateR0(
        Œ≤::T,
        Œ≥::T,
        Œº::T,
        ùêÇ::Array{T},
        pop_matrix::Array{T}
    ) where {T<:AbstractFloat}
    size(ùêÇ, 1) == size(ùêÇ, 2) ? nothing : error("ùêÇ must be square")
    size(ùêÇ, 1) == size(pop_matrix, 1) ? nothing : error("ùêÇ and pop_matrix must have the same number of rows")

    ùö© = Œ≤ * ùêÇ
    
    ùêÖ = ùö© .* pop_matrix
    ùêï = Diagonal(repeat([Œ≥ + Œº], size(ùêÇ, 1)))

    ùêÖùêï‚Åª¬π = ùêÖ * inv(ùêï)
    eigenvals, eigenvectors = eigen(ùêÖùêï‚Åª¬π)
    
    R‚ÇÄ = maximum(real(eigenvals))
    
    return R‚ÇÄ
end

function calculateR0(Œ≤, Œ≥, Œº, ùêÇ, pop_matrix)
    calculateR0(
        convert(Float64, Œ≤),
        convert(Float64, Œ≥),
        convert(Float64, Œº),
        convert(Array{Float64}, [ùêÇ]),
        convert(Array{Float64}, [pop_matrix])
    )
end