---
title: "Outbreak Threshold Detection"
author: "Callum Arnold"
date: today
title-block-banner: true
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 4
    code-copy: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
    code-link: true
    anchor-sections: true
    fig-width: 10
    fig-height: 8
execute:
  cache: true
jupyter: julia-1.8
---

```{julia}
using DrWatson
quickactivate(@__DIR__, "OutbreakDetection")
```

```{julia}
using JumpProcesses, StochasticDiffEq, DifferentialEquations, LinearAlgebra
using Catalyst, Random, Statistics, DataFrames, CairoMakie, ProgressMeter

CairoMakie.activate!()
```

```{julia}
function rate(out, u, p, t)
    out[1] = p[1] * u[1] * u[2] / (u[1] + u[2] + u[3])           # β * S * I
    out[2] = p[2] * u[2]                      # ν * I
    # out[3] = p[3] * u[1]                    # μ * N
    # out[4] = p[3] * u[1]                    # μ * S
    # out[5] = p[3] * u[2]                    # μ * I
    # out[6] = p[3] * u[3]                    # μ * R
    nothing
end
```

```{julia}
c = zeros(3, 2)
# S + I --> I
c[1, 1] = -1        # S -> S - 1
c[2, 1] = 1         # I -> I + 1

# I --> R
c[2, 2] = -1        # I -> I - 1
c[3, 2] = 1         # R -> R + 1

# S --> 2X
# c[1, 3] = 1         # S -> S + 1

# # S --> 0X
# c[1, 4] = -1        # S -> S - 1

# # I --> 0Y
# c[2, 5] = -1        # I -> I - 1

# # R --> 0Z
# c[3, 6] = -1        # R -> R - 1

function change!(du, u, p, t, counts, mark)
    mul!(du, c, counts)
    nothing
end
```

```{julia}
rj = RegularJump(rate, change!, 2)
```

```{julia}
tmax = 100.0
δt = 0.001
tspan = (0.0, tmax)
tlength = length(tspan[1]:δt:tspan[2])
Random.seed!(1234);
```

```{julia}
# R₀ = 2
# γ = 1/8
μ = 0.001
# β = R₀ * (γ + μ)
# ζ = 0.001
# p = (β, γ, μ, ζ)


u₀ = [1000.0, 50.0, 0.0]

β = 0.1/1000.0
γ = 0.01
μ = 0.001
p = (β, γ, μ)

```

```{julia}
prob = DiscreteProblem(u₀, tspan, p)
jump_prob = JumpProblem(prob, Direct(), rj)
sol = solve(jump_prob, TauLeaping(); dt = δt)
sol_array = zeros(4, length(sol))
sol_array[1:3, :] = Array(sol)
sol_array[4, :] = sum(sol_array[1:3, :], dims = 1)
```

```{julia}
f = Figure()
ax = Axis(
    f[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

lines!(ax, sol.t, sol_array[1, :], linewidth = 3, label = "S(t)")
lines!(ax, sol.t, sol_array[2, :], linewidth = 3, label = "I(t)")
lines!(ax, sol.t, sol_array[3, :], linewidth = 3, label = "R(t)")
lines!(ax, sol.t, sol_array[4, :], linewidth = 3, label = "N(t)")

axislegend(ax)

f
```

```{julia}
function run_sir_sim(; u₀, tspan, p)
    prob = DiscreteProblem(u₀, tspan, p)
    jump_prob = JumpProblem(prob, Direct(), rj)
    sol_jump = solve(jump_prob, TauLeaping(); dt = δt)
    return sol_jump(0:δt:tmax);
end
```

```{julia}
function create_sim_array(; out_jump)
    test_array[1:3, :] = Array(out_jump)
    test_array[4, :] .= out_jump.t

    return test_array
end
```

```{julia}
sir_sim_plot = Figure()
ax = Axis(sir_sim_plot[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

nsims = 100

sir_array = zeros(Float64, 4, tlength)
all_sims_array = zeros(Float64, 4, tlength, nsims)
sim_means = zeros(Float64, 3, tlength)

@showprogress for i in 1:nsims
    out_jump = run_sir_sim(u₀ = u₀, tspan = tspan, p = p)
    sir_array = create_sim_array(out_jump = out_jump)

    all_sims_array[:, :, i] = sir_array


    lines!(ax, sir_array[4, :], sir_array[1, :], linewidth = 4, color = ("dodgerblue4", 0.01))
    lines!(ax, sir_array[4, :], sir_array[2, :], linewidth = 4, color = ("firebrick3", 0.01))
    lines!(ax, sir_array[4, :], sir_array[3, :], linewidth = 4, color = ("chocolate2", 0.01)) 
    
end

@showprogress for sim in 1:tlength, outcome in 1:3
    sim_means[outcome, sim] = mean(all_sims_array[outcome, sim, :])
end

lines!(ax, sir_array[4, :], sim_means[1, :], linewidth = 3, color = "dodgerblue4")
lines!(ax, sir_array[4, :], sim_means[2, :], linewidth = 3, color = "firebrick3")
lines!(ax, sir_array[4, :], sim_means[3, :], linewidth = 3, color = "chocolate2")

sir_sim_plot
```
