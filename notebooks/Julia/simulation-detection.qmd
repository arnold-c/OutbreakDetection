---
title: "Outbreak Threshold Detection"
author: "Callum Arnold"
date: today
title-block-banner: true
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 4
    code-copy: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
    code-link: true
    anchor-sections: true
    fig-width: 10
    fig-height: 8
execute:
  cache: true
jupyter: julia-1.8
---

```{julia}
using DrWatson
quickactivate(@__DIR__, "OutbreakDetection")
```

```{julia}
using JumpProcesses, StochasticDiffEq, DifferentialEquations, LinearAlgebra
using Catalyst, Random, Statistics, DataFrames, CairoMakie, ProgressMeter

CairoMakie.activate!()
```

```{julia}
X = 450
Y = 50
Z = 0
N = X + Y + Z
u₀ = [X, Y, Z, N]
```

```{julia}
R₀ = 12
γ = 1/8
μ = 1 / (365 * 62.5)
β = R₀ * (γ + μ)
p = (; β, γ, μ)
```

```{julia}
tmax = 100 * 365
δt = 0.001
tspan = (0.0, tmax)
tlength = length(tspan[1]:δt:tspan[2])
Random.seed!(1234);
```

```{julia}
rate1(u, p, t) = p.β * u[1] * u[2] / u[4]  # β*X*Y / N

function affect1!(integrator)
    integrator.u[1] -= 1         # X -> X - 1
    integrator.u[2] += 1         # Y -> Y + 1
    nothing
end

jump = ConstantRateJump(rate1, affect1!)
```

```{julia}
rate2(u, p, t) = p.γ * u[2]         # γ*Y

function affect2!(integrator)
    integrator.u[2] -= 1        # Y -> Y - 1
    integrator.u[3] += 1        # Z -> Z + 1
    nothing
end

jump2 = ConstantRateJump(rate2, affect2!)
```

```{julia}
birth_rate(u, p, t) = p.μ * u[4]    # μ * N

function birth_affect!(integrator)
    integrator.u[1] += 1
    integrator.u[4] += 1
    nothing
end

birth_jump = ConstantRateJump(birth_rate, birth_affect!)
```

```{julia}
death_rate(u, p, t) = p.μ * u[4]    # μ * N

function death_affect!(integrator)
    map!(
        i -> ifelse(integrator[i] > 0, integrator.u[i] - 1, integrator.u[i]),
        integrator.u,
        eachindex(integrator.u)
    )

end

death_jump = ConstantRateJump(death_rate, death_affect!)
```

```{julia}
prob = DiscreteProblem(u₀, tspan, p)
jump_prob = JumpProblem(prob, Direct(), jump, jump2, birth_jump, death_jump)
sol = solve(jump_prob, SSAStepper())

sol_array = Array(sol)
```
```{julia}
f = Figure()
ax = Axis(
    f[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

lines!(ax, sol.t, sol_array[1, :], linewidth = 3, label = "X(t)")
lines!(ax, sol.t, sol_array[2, :], linewidth = 3, label = "Y(t)")
lines!(ax, sol.t, sol_array[3, :], linewidth = 3, label = "Z(t)")
lines!(ax, sol.t, sol_array[4, :], linewidth = 3, label = "N(t)")

axislegend(ax)

f
```

```{julia}
function run_sir_sim(; u₀, tspan, p)
    prob = DiscreteProblem(u₀, tspan, p)
    jump_prob = JumpProblem(prob, Direct(), rj)
    sol_jump = solve(jump_prob, TauLeaping(); dt = δt)
    return sol_jump(0:δt:tmax);
end
```

```{julia}
function create_sim_array(; out_jump)
    test_array[1:3, :] = Array(out_jump)
    test_array[4, :] .= out_jump.t

    return test_array
end
```

```{julia}
sir_sim_plot = Figure()
ax = Axis(sir_sim_plot[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

nsims = 100

sir_array = zeros(Float64, 4, tlength)
all_sims_array = zeros(Float64, 4, tlength, nsims)
sim_means = zeros(Float64, 3, tlength)

@showprogress for i in 1:nsims
    out_jump = run_sir_sim(u₀ = u₀, tspan = tspan, p = p)
    sir_array = create_sim_array(out_jump = out_jump)

    all_sims_array[:, :, i] = sir_array


    lines!(ax, sir_array[4, :], sir_array[1, :], linewidth = 4, color = ("dodgerblue4", 0.01))
    lines!(ax, sir_array[4, :], sir_array[2, :], linewidth = 4, color = ("firebrick3", 0.01))
    lines!(ax, sir_array[4, :], sir_array[3, :], linewidth = 4, color = ("chocolate2", 0.01)) 
    
end

@showprogress for sim in 1:tlength, outcome in 1:3
    sim_means[outcome, sim] = mean(all_sims_array[outcome, sim, :])
end

lines!(ax, sir_array[4, :], sim_means[1, :], linewidth = 3, color = "dodgerblue4")
lines!(ax, sir_array[4, :], sim_means[2, :], linewidth = 3, color = "firebrick3")
lines!(ax, sir_array[4, :], sim_means[3, :], linewidth = 3, color = "chocolate2")

sir_sim_plot
```
