---
title: "Outbreak Threshold Detection"
author: "Callum Arnold"
date: today
title-block-banner: true
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 4
    code-copy: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
    code-link: true
    anchor-sections: true
    fig-width: 10
    fig-height: 8
execute:
  cache: true
jupyter: julia-1.8
---

```{julia}
using DrWatson
quickactivate(@__DIR__, "OutbreakDetection")
```

```{julia}
using JumpProcesses, StochasticDiffEq, DifferentialEquations, LinearAlgebra
using Catalyst, Random, Statistics, DataFrames, CairoMakie, ProgressMeter
using BenchmarkTools

CairoMakie.activate!()
```

```{julia}
tmax = 2.0
δt = 0.1/365
tspan = (0.0, tmax)
tlength = length(tspan[1]:δt:tspan[2])
Random.seed!(1234);

u₀ = [999.0, 10.0, 0.0, 0.0]

μ = 1
β = 1000
σ = 365/8
γ = 365/5
p = (β, σ, γ, μ)
```

```{julia}
expose_rate(u, p, t) = p[1] * u[1] * u[2] / (u[1] + u[2] + u[3] + u[4])  # β * S * I / N
function expose_affect!(integrator)
    integrator.u[1] -= 1         # S -> S - 1
    integrator.u[2] += 1         # E -> E + 1
    nothing
end
expose_jump = ConstantRateJump(expose_rate, expose_affect!)

infec_rate(u, p, t) = p[2] * u[2]   # σ * E
function infec_affect!(integrator)
    integrator.u[2] -= 1         # E -> E - 1
    integrator.u[3] += 1         # I -> I + 1
    nothing
end
infec_jump = ConstantRateJump(infec_rate, infec_affect!)

recov_rate(u, p, t) = p[3] * u[3]   # γ * I
function recov_affect!(integrator)
    integrator.u[3] -= 1         # I -> I - 1
    integrator.u[4] += 1         # R -> R + 1
    nothing
end
recov_jump = ConstantRateJump(recov_rate, recov_affect!)

birth_rate(u, p, t) = p[4] * (u[1] + u[2] + u[3] + u[4]) # μ * N
function birth_affect!(integrator)
    integrator.u[1] += 1         # S -> S + 1
    nothing
end
birth_jump = ConstantRateJump(birth_rate, birth_affect!)

S_death_rate(u, p, t) = p[4] * u[1] # μ * S
function S_death_affect!(integrator)
    integrator.u[1] -= 1        # S -> S - 1
end
S_death_jump = ConstantRateJump(S_death_rate, S_death_affect!)

E_death_rate(u, p, t) = p[4] * u[2] # μ * E
function E_death_affect!(integrator)
    integrator.u[2] -= 1        # E -> E -1
end
E_death_jump = ConstantRateJump(E_death_rate, E_death_affect!)

I_death_rate(u, p, t) = p[4] * u[3] # μ * I
function I_death_affect!(integrator)
    integrator.u[3] -= 1        # I -> I - 1
end
I_death_jump = ConstantRateJump(I_death_rate, I_death_affect!)

R_death_rate(u, p, t) = p[4] * u[4] # μ * R
function R_death_affect!(integrator)
    integrator.u[4] -= 1        # R -> R - 1 
end
R_death_jump = ConstantRateJump(R_death_rate, R_death_affect!)

gillespie_jumps = [
    expose_jump, infec_jump, recov_jump, birth_jump, S_death_jump, E_death_jump,
    I_death_jump, R_death_jump
]
```

```{julia}
prob = DiscreteProblem(u₀, tspan, p)
jump_prob = JumpProblem(prob, Direct(), gillespie_jumps...)
sol = solve(jump_prob, SSAStepper())
sol_array = zeros(5, length(sol))
sol_array[1:4, :] = Array(sol)
sol_array[5, :] = sum(sol_array[1:4, :], dims = 1)
```

```{julia}
fig = Figure()
ax = Axis(
    fig[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

lines!(ax, sol.t, sol_array[1, :], linewidth = 3, label = "S(t)")
lines!(ax, sol.t, sol_array[2, :], linewidth = 3, label = "E(t)")
lines!(ax, sol.t, sol_array[3, :], linewidth = 3, label = "I(t)")
lines!(ax, sol.t, sol_array[4, :], linewidth = 3, label = "R(t)")
lines!(ax, sol.t, sol_array[5, :], linewidth = 3, label = "N(t)")

axislegend(ax)

fig
```

```{julia}
function run_sir_sim(; u₀, tspan, p)
    prob = DiscreteProblem(u₀, tspan, p)
    jump_prob = JumpProblem(prob, Direct(), rj)
    sol_jump = solve(jump_prob, TauLeaping(); dt = δt)
    return sol_jump(0:δt:tmax);
end
```

```{julia}
function create_sim_array(; out_jump)
    test_array[1:3, :] = Array(out_jump)
    test_array[4, :] .= out_jump.t

    return test_array
end
```

```{julia}
sir_sim_plot = Figure()
ax = Axis(sir_sim_plot[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

nsims = 100

sir_array = zeros(Float64, 4, tlength)
all_sims_array = zeros(Float64, 4, tlength, nsims)
sim_means = zeros(Float64, 3, tlength)

@showprogress for i in 1:nsims
    out_jump = run_sir_sim(u₀ = u₀, tspan = tspan, p = p)
    sir_array = create_sim_array(out_jump = out_jump)

    all_sims_array[:, :, i] = sir_array


    lines!(ax, sir_array[4, :], sir_array[1, :], linewidth = 4, color = ("dodgerblue4", 0.01))
    lines!(ax, sir_array[4, :], sir_array[2, :], linewidth = 4, color = ("firebrick3", 0.01))
    lines!(ax, sir_array[4, :], sir_array[3, :], linewidth = 4, color = ("chocolate2", 0.01)) 
    
end

@showprogress for sim in 1:tlength, outcome in 1:3
    sim_means[outcome, sim] = mean(all_sims_array[outcome, sim, :])
end

lines!(ax, sir_array[4, :], sim_means[1, :], linewidth = 3, color = "dodgerblue4")
lines!(ax, sir_array[4, :], sim_means[2, :], linewidth = 3, color = "firebrick3")
lines!(ax, sir_array[4, :], sim_means[3, :], linewidth = 3, color = "chocolate2")

sir_sim_plot
```
