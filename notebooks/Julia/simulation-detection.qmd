---
title: "Outbreak Threshold Detection"
author: "Callum Arnold"
date: today
title-block-banner: true
format:
  html:
    theme: flatly
    toc: true
    toc-depth: 4
    code-copy: true
    code-fold: true
    code-overflow: wrap
    code-tools: true
    code-link: true
    anchor-sections: true
    fig-width: 10
    fig-height: 8
execute:
  cache: true
jupyter: julia-1.8
---

```{julia}
using DrWatson
quickactivate(@__DIR__, "OutbreakDetection")
```

```{julia}
using ModelingToolkit, JumpProcesses, Random, Statistics
using DataFrames, CairoMakie

CairoMakie.activate!()
```

```{julia}
@parameters β γ
@variables t S(t) I(t) R(t)
N = S + I + R
rate₁   = β * S * I/N
affect₁ = [S ~ S - 1, I ~ I + 1]
rate₂   = γ*I
affect₂ = [I ~ I - 1, R ~ R + 1]
j₁      = ConstantRateJump(rate₁,affect₁)
j₂      = ConstantRateJump(rate₂,affect₂)
@named js      = JumpSystem([j₁, j₂], t, [S, I, R], [β, γ])
```

```{julia}
u₀ = [S => 990, I => 10, R => 0];
p = [β => 0.5, γ => 0.25];
```

```{julia}
tmax = 250.0
tspan = (0.0, tmax)
δt = 1.0;
Random.seed!(1234);
```

```{julia}
function run_sir_sim(; js, u₀, tspan, p)
    prob = DiscreteProblem(js, u₀, tspan, p)
    sir_jprob = JumpProblem(js, prob, Direct());
    sol_jump = solve(sir_jprob, SSAStepper());
    return sol_jump(0:δt:tmax);
end
```

```{julia}
function create_sim_array(; out_jump)
    array_jump[1:3, :] = Array(out_jump)
    array_jump[4, :] .= out_jump.t

    return array_jump
end
```

```{julia}
sir_sim_plot = Figure()
ax = Axis(sir_sim_plot[1, 1],
    xlabel = "Time",
    ylabel = "Number"
)

nsims = 100

array_jump = zeros(Float64, 4, Int64(tmax) + 1)
all_sims_array = zeros(Float64, 4, Int64(tmax) + 1, nsims)
sim_means = zeros(Float64, 3, Int(tmax) + 1)

for i in 1:nsims
    out_jump = run_sir_sim(js = js, u₀ = u₀, tspan = tspan, p = p)
    array_jump = create_sim_array(out_jump = out_jump)

    all_sims_array[:, :, i] = array_jump


    lines!(ax, array_jump[4, :], array_jump[1, :], linewidth = 4, color = ("dodgerblue4", 0.05))
    lines!(ax, array_jump[4, :], array_jump[2, :], linewidth = 4, color = ("firebrick3", 0.05))
    lines!(ax, array_jump[4, :], array_jump[3, :], linewidth = 4, color = ("chocolate2", 0.05)) 
    
end

for sim in 1:Int(tmax)+1, outcome in 1:3
    sim_means[outcome, sim] = mean(all_sims_array[outcome, sim, :])
end

lines!(ax, array_jump[4, :], sim_means[1, :], linewidth = 4, color = "dodgerblue4")
lines!(ax, array_jump[4, :], sim_means[2, :], linewidth = 4, color = "firebrick3")
lines!(ax, array_jump[4, :], sim_means[3, :], linewidth = 4, color = "chocolate2")

sir_sim_plot
```
